{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ChatGPT Request JSON Schema",
  "description": "ChatGPT Request JSON Schema",
  "type": "object",
  "required": [
    "model",
    "messages"
  ],
  "properties": {
    "model": {
      "type": "string",
      "description": "ID of the OpenAI model to use",
      "enum": [
        "gpt-3.5-turbo",
        "gpt-3.5-turbo-16k",
        "gpt-3.5-turbo-0613",
        "gpt-3.5-turbo-16k-0613",
        "gpt-4",
        "gpt-4-0613",
        "gpt-4-32k",
        "gpt-4-32k-0613"
      ]
    },
    "messages": {
      "type": "array",
      "description": "A list of messages comprising the conversation so far",
      "items": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the messages author. One of system, user, assistant, or function.",
            "enum": [
              "user",
              "system",
              "assistant",
              "function"
            ]
          },
          "content": {
            "type": "string",
            "description": "The contents of the message. content is required for all messages except assistant messages with function calls."
          },
          "name": {
            "type": "string",
            "description": "The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.",
            "pattern": "^[a-zA-Z0-9_]{1,64}$"
          },
          "function_call": {
            "type": "string",
            "description": "The name and arguments of a function that should be called, as generated by the model."
          }
        }
      }
    },
    "functions": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "name",
          "description",
          "parameters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "function name"
          },
          "description": {
            "type": "string",
            "description": "function description"
          },
          "parameters": {
            "type": "object",
            "description": "function parameters",
            "properties": {
              "type": {
                "type": "string",
                "description": "parameter type",
                "enum": [
                  "object"
                ]
              },
              "required": {
                "$ref": "#/definitions/stringArray"
              },
              "properties": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/definitions/simpleTypes"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "function_call": {
      "type": "string",
      "description": "Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function"
    },
    "temperature": {
      "type": "number",
      "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
      "default": 1
    },
    "top_p": {
      "type": "number",
      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
      "default": 1.0
    },
    "n": {
      "type": "number",
      "description": "How many chat completion choices to generate for each input message.",
      "default": 1
    },
    "stream": {
      "type": "boolean",
      "description": "If set, partial message deltas will be sent, like in ChatGPT.",
      "default": false
    },
    "stop": {
      "type": "array",
      "description": "A list of tokens where the API will stop generating further tokens. The API will stop generating tokens at the first occurrence of any of these tokens. If none are specified, the API will use its default stop list.",
      "items": {
        "type": "string"
      }
    },
    "max_tokens": {
      "type": "number",
      "description": "The maximum number of tokens to generate in the chat completion."
    },
    "presence_penalty": {
      "type": "number",
      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
      "default": 0
    },
    "frequency_penalty": {
      "type": "number",
      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
      "default": 0
    },
    "logit_bias": {
      "type": "object",
      "description": "Modify the likelihood of specified tokens appearing in the completion."
    },
    "user": {
      "type": "string",
      "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more."
    }
  },
  "definitions": {
    "simpleTypes": {
      "enum": [
        "array",
        "boolean",
        "integer",
        "number",
        "object",
        "string"
      ]
    },
    "stringArray": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "default": []
    }
  }
}